sensor:
  - platform: template
    sensors:
      turnover:
        # turnover rate
        # Turnover Rate in Hours = (Pool Volume Gallons)/60 * pump speed (GPM)
        unit_of_measurement: "h"
        friendly_name: "Pump Run Time"
        value_template: >-
          {{(states('input_number.capacity_imperial')|int *
          (1 + (states('input_number.quality')| int - 3)*0.1)/
          (60 * states('input_number.pump_speed_imperial')|float(0)))
          | round(1,default=0)}}
        icon_template: >-
          {{ "mdi:refresh" }}

      time_to_run_daily:
        # how long pump needs to run (single speed) to achieve turnover
        # compensated for temperature
        # TODO: check this, currently running option 2
        # time_to_run_daily = temp(F)/5 + recirc - 14 for a slope of 2h/10 degrees F
        # time_to_run_daily = temp(F)/10 + recirc - 7 for a slope of 1h/10 degrees F
        # using today_max_temp_safe instead of current temperature
        unit_of_measurement: "h"
        friendly_name: "Pump Run Time"
        value_template: >-
          {{[0, (states('sensor.today_max_temp_safe')|float(0)/10 + states('sensor.turnover')|float(0) - 7)]|max|round(1, default=0)}}
        icon_template: >-
          {% if is_state("input_boolean.enough_pump_runtime", "on") %}
            mdi:clock-check
          {% else %}
            mdi:alert-octagon
          {% endif %}

      ttr_low_speed:
        # how long to run in either single speed or low speed
        friendly_name: "Run Time"
        unit_of_measurement: "h"
        value_template: >-
          {% if is_state('input_boolean.turbo', 'on') %}
            {{(states('sensor.time_to_run_daily')|float / (1/2 + states('input_number.turbo')|int(0)/100))|round(2, default=0)}}
          {% else %}
            {{states('sensor.time_to_run_daily')|float|round(2)}}
          {% endif %}
      ttr_high_speed:
        # how long to run in high speed
        friendly_name: "High Speed Run Time"
        unit_of_measurement: "h"
        value_template: >-
          {% if is_state('input_boolean.turbo', 'on') %}
            {{((states('sensor.time_to_run_daily')|float / (1/2 + states('input_number.turbo')|int/100))* (states('input_number.turbo')|int/100))|round(2)}}
          {% else %}
            0.0
          {% endif %}

input_boolean:
  boost_24h:
    icon: mdi:engine
    initial: false

automation:
  - alias: cycle_start
    # start the cycle if the time matches "Pump cycle start time" = cycle_start
    # in Automatic mode only
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == states('input_datetime.cycle_start') [0:5] }}"
        # value_template: "{{ states('sensor.time') == states.input_datetime.cycle_start.attributes.timestamp| int | timestamp_custom('%H:%M', False) }}"
    condition:
      - condition: state
        entity_id: input_select.type_of_sched
        state: "Automatic"
    action:
      - service: switch.turn_on
        entity_id: switch.pump

  - alias: when_pump_starts
    # when the pump starts, take care of all chemicals
    trigger:
      - platform: state
        entity_id: switch.pump
        to: "on"
    condition: []
    action:
      - entity_id: automation.ph_bad
        service: automation.turn_on
      - entity_id: automation.orp_bad
        service: automation.turn_on
      # wait for the pump to run for 15 mins before starting chemicals
      - delay: 00:15:00
      - service: automation.trigger
        entity_id: automation.bleach_set
      - service: automation.trigger
        entity_id: automation.muriatic_set
      - event: event_muriatic_inject
        event_data:
          state: "on"
      - event: event_bleach_inject
        event_data:
          state: "on"

  - alias: help_prime
    # when the pump starts, turn on the turbo for a few minutes (to help priming)
    trigger:
      - platform: state
        entity_id: switch.pump
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.turbo
        state: "on"
      - condition: state
        entity_id: switch.turbo
        state: "off"
        for:
          seconds: 10
    action:
      - service: switch.turn_on
        entity_id: switch.turbo
      - delay: 00:10:00
      - service: switch.turn_off
        entity_id: switch.turbo

  - alias: pump_stop
    # ensure injection is stopped when pump stops
    trigger:
      - platform: state
        entity_id: switch.pump
        to: "off"
    condition: []
    action:
      - service: switch.turn_off
        entity_id: switch.turbo
      - service: switch.turn_off
        entity_id: switch.ph
      - service: switch.turn_off
        entity_id: switch.orp
      - service: input_boolean.turn_off
        entity_id: input_boolean.boost_24h
      # interrupt any automations that are running
      - service: automation.turn_off
        entity_id: automation.when_pump_starts
      - service: automation.turn_on
        entity_id: automation.when_pump_starts
      - service: automation.turn_off
        entity_id: automation.help_prime
      - service: automation.turn_on
        entity_id: automation.help_prime
      - service: automation.turn_off
        entity_id: automation.bleach_inject
      - service: automation.turn_on
        entity_id: automation.bleach_inject
      - service: automation.turn_off
        entity_id: automation.muriatic_inject
      - service: automation.turn_on
        entity_id: automation.muriatic_inject

  - alias: check_cummulative_time_low
    # stop the pump if it ran enough
    trigger:
      - platform: template
        value_template: "{{ states('sensor.cummulated_flow_low') > states('sensor.ttr_low_speed') }}"
    condition:
      condition: not
      conditions:
        - condition: state
          entity_id: input_select.type_of_sched
          state: "Schedule"
    action:
      - service: switch.turn_off
        entity_id: switch.pump

  - alias: check_cummulative_time_high
    # stop the pump if it ran enough
    condition:
      - condition: state
        entity_id: input_boolean.turbo
        state: "on"
      - condition: not
        conditions:
          - condition: state
            entity_id: input_select.type_of_sched
            state: "Schedule"
    trigger:
      - platform: template
        value_template: "{{ states('sensor.cummulated_flow_high') > states('sensor.ttr_high_speed') }}"
    action:
      - service: notify.notify
        data_template:
          message: "TODO"
          title: "TODO: high speed pump ran more than the required {{states('sensor.ttr_high_speed')}}"
      - service: switch.turn_off
        entity_id: switch.turbo

  - alias: every_2_min
    # every 2 mins while the pump in running for at least 5 mins,
    # and there is water flow in the flow cell or the flow sensor is not enabled,
    # check ph/orp/temp
    trigger:
      - platform: time_pattern
        minutes: "/2"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.pump
          state: "on"
          for:
            minutes: 5
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.has_flow_sensor
              state: "off"
            - condition: numeric_state
              entity_id: sensor.flow_on
              above: 0
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.ezo_ph
      - service: homeassistant.update_entity
        entity_id: sensor.ezo_temperature
      - service: homeassistant.update_entity
        entity_id: sensor.ezo_orp

  - alias: pump_on_for_24h
    # Boost
    trigger:
      - platform: state
        entity_id: input_boolean.boost_24h
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.maintenance
        state: "off"
    action:
      - service: switch.turn_on
        entity_id: switch.pump
      - delay: 24:00:00
      - service: switch.turn_off
        entity_id: switch.pump
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.boost_24h
